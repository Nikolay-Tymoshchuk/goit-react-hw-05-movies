{"version":3,"file":"static/js/514.64f5fdd3.chunk.js","mappings":"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","sources":["api/tmdbApi.js","components/reviews/Review.styled.jsx","components/reviews/ReviewDetails.jsx","components/reviews/NoReview.jsx","components/reviews/Reviews.jsx","helpers/normalizers.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '5ce599886a4c0703a030654068991e03';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst END_POINTS = {\n  TRENDING: '/trending/movie/day',\n  SEARCH_MOVIE: '/search/movie',\n  DETAILS: '/movie/',\n};\n\nexport const getTrending = async () => {\n  const request = await axios.get(\n    `${END_POINTS.TRENDING}?api_key=${API_KEY}&language=en-US&page=1&time_window=week`\n  );\n  return request.data;\n};\n\nexport const getSearchMovie = async query => {\n  const request = await axios.get(\n    `${END_POINTS.SEARCH_MOVIE}?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`\n  );\n  return request.data;\n};\n\nexport const getMovieDetails = async id => {\n  const request = await axios.get(`${END_POINTS.DETAILS}${id}?api_key=${API_KEY}`);\n  return request.data;\n};\n\nexport const getMovieActors = async id => {\n  const request = await axios.get(`${END_POINTS.DETAILS}${id}/credits?api_key=${API_KEY}`);\n  return request.data;\n};\n\nexport const getMovieReviews = async id => {\n  const request = await axios.get(`${END_POINTS.DETAILS}${id}/reviews?api_key=${API_KEY}`);\n  return request.data;\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  list-style: none;\n  padding: 0 20px;\n`;\n\nexport const ImageBox = styled.div`\n  width: 75px;\n  display: inline-block;\n  border-radius: 8px;\n  overflow: hidden;\n  background-color: #707070;\n`;\n\nexport const Author = styled.h5`\n  margin: 0;\n  margin-left: 1em;\n`;\n\nexport const AuthorDetails = styled.div`\n  display: flex;\n  align-items: flex-start;\n`;\n\nexport const ListItem = styled.li`\n  padding: 1em;\n  margin-bottom: 4em;\n  border-radius: 12px;\n  box-shadow: 0px 0px 6px -2px rgba(0, 0, 0, 1);\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nexport const Review = styled.p`\n  text-indent: 2em;\n  text-align: justify;\n`;\n\nexport const NoReviewBox = styled.div`\n  margin-left: 1em;\n  display: flex;\n  align-items: center;\n  gap: 1em;\n`;\n","import PropTypes from 'prop-types';\nimport { ListItem, ImageBox, AuthorDetails, Author, Review } from './Review.styled';\n\nexport const ReviewDetails = ({ options }) => {\n  const { author, content, avatar } = options;\n  return (\n    <ListItem>\n      <AuthorDetails>\n        <ImageBox>\n          <img src={avatar} alt={author} />\n        </ImageBox>\n        <Author>{author}</Author>\n      </AuthorDetails>\n      <Review>{content}</Review>\n    </ListItem>\n  );\n};\n\nReviewDetails.propTypes = {\n  options: PropTypes.shape({\n    author: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n    avatar: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { ImFileEmpty } from 'react-icons/im';\nimport { NoReviewBox } from './Review.styled';\n\nexport const NoReview = () => {\n  return (\n    <NoReviewBox>\n      <ImFileEmpty size={32} />\n      <p>No reviews yet</p>\n    </NoReviewBox>\n  );\n};\n","import { getMovieReviews } from 'api/tmdbApi';\nimport { normalizerIncomingReviewsData } from 'helpers/normalizers';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ReviewDetails } from './ReviewDetails';\nimport { List } from './Review.styled';\nimport { Pulsar } from '@uiball/loaders';\nimport { toast } from 'react-toastify';\nimport { NoReview } from './NoReview';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieReviews(movieId)\n      .then(data => {\n        setReviews(normalizerIncomingReviewsData(data));\n      })\n      .catch(() => toast.error('Something went wrong'));\n  }, [movieId]);\n\n  return (\n    <>\n      {!reviews && <Pulsar />}\n      {reviews && reviews.length === 0 && <NoReview />}\n      {reviews && (\n        <List>\n          {reviews.map(({ id, ...review }) => (\n            <ReviewDetails key={id} options={review} />\n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","const IMAGE_URL = 'https://image.tmdb.org/t/p/';\n\nexport const normalizerIncomingFilmData = film => {\n  const { title, vote_average, release_date, overview, genres, poster_path } = film;\n  const rating =\n    (vote_average * 10) % 1 === 0\n      ? Number(vote_average * 10) + '%'\n      : (vote_average * 10).toFixed(1) + '%';\n  const release = release_date.split('-')[0];\n  const genre = genres.map(genre => genre.name).join(', ');\n  const poster = `${IMAGE_URL}w300${poster_path}`;\n  return {\n    title,\n    rating,\n    release,\n    overview,\n    genres: genre,\n    poster,\n  };\n};\n\nexport const normalizerIncomingFilmListData = filmList => {\n  return filmList.map(({ id, title }) => ({ id, title }));\n};\n\nexport const normalizerIncomingActorsData = data => {\n  return data.cast.map(({ id, character, original_name: name, profile_path }) => {\n    const photo =\n      profile_path !== null\n        ? `${IMAGE_URL}original${profile_path}`\n        : 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png';\n    return { id, character, name, photo };\n  });\n};\n\nexport const normalizerIncomingReviewsData = data => {\n  return data.results.map(({ id, author, content, author_details: { avatar_path } }) => {\n    const regex = '^/+[a-zA-Z0-9]+[.]+[a-z]+$';\n    let avatar =\n      avatar_path ?? 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png';\n\n    if (avatar.match(regex)) {\n      avatar = `${IMAGE_URL}original${avatar}`;\n    }\n\n    if (avatar.startsWith('/')) {\n      avatar = avatar.substring(1);\n    }\n\n    return { id, author, content, avatar };\n  });\n};\n"],"names":["API_KEY","axios","END_POINTS","getTrending","request","data","getSearchMovie","query","getMovieDetails","id","getMovieActors","getMovieReviews","List","styled","ImageBox","Author","AuthorDetails","ListItem","Review","NoReviewBox","ReviewDetails","options","author","content","avatar","src","alt","NoReview","size","useState","reviews","setReviews","movieId","useParams","useEffect","then","normalizerIncomingReviewsData","catch","toast","Pulsar","length","map","review","IMAGE_URL","normalizerIncomingFilmData","film","title","vote_average","release_date","overview","genres","poster_path","rating","Number","toFixed","release","split","genre","name","join","poster","normalizerIncomingFilmListData","filmList","normalizerIncomingActorsData","cast","character","original_name","profile_path","photo","results","avatar_path","author_details","match","startsWith","substring"],"sourceRoot":""}