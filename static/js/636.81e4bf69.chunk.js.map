{"version":3,"file":"static/js/636.81e4bf69.chunk.js","mappings":"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","sources":["api/tmdbApi.js","components/films-list/FilmsList.styled.jsx","components/films-list/FilmsList.jsx","helpers/normalizers.js","components/search-form/SearchForm.styled.jsx","components/search-form/SearchForm.jsx","pages/movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '5ce599886a4c0703a030654068991e03';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst END_POINTS = {\n  TRENDING: '/trending/movie/day',\n  SEARCH_MOVIE: '/search/movie',\n  DETAILS: '/movie/',\n};\n\nexport const getTrending = async () => {\n  const request = await axios.get(\n    `${END_POINTS.TRENDING}?api_key=${API_KEY}&language=en-US&page=1&time_window=week`\n  );\n  return request.data;\n};\n\nexport const getSearchMovie = async query => {\n  const request = await axios.get(\n    `${END_POINTS.SEARCH_MOVIE}?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`\n  );\n  return request.data;\n};\n\nexport const getMovieDetails = async id => {\n  const request = await axios.get(`${END_POINTS.DETAILS}${id}?api_key=${API_KEY}`);\n  return request.data;\n};\n\nexport const getMovieActors = async id => {\n  const request = await axios.get(`${END_POINTS.DETAILS}${id}/credits?api_key=${API_KEY}`);\n  return request.data;\n};\n\nexport const getMovieReviews = async id => {\n  const request = await axios.get(`${END_POINTS.DETAILS}${id}/reviews?api_key=${API_KEY}`);\n  return request.data;\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  padding: 0.5em;\n  font-size: 20px;\n  list-style: none;\n`;\n\nexport const ListChild = styled.li`\n  padding-top: 5px;\n  padding-bottom: 5px;\n  display: flex;\n  align-items: center;\n\n  &:hover {\n    color: orangered;\n    transform-origin: left bottom;\n    transform: scale(1.05);\n    transition: 200ms linear;\n  }\n`;\n\nexport const LinkFilm = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n  margin-left: 0.5em;\n`;\n","import PropTypes from 'prop-types';\nimport { List, ListChild, LinkFilm } from './FilmsList.styled';\nimport { useLocation } from 'react-router-dom';\nimport { BiMoviePlay } from 'react-icons/bi';\n\nconst FilmsList = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      {films && (\n        <List>\n          {films.map(({ id, title }) => (\n            <ListChild key={id}>\n              <BiMoviePlay />\n              <LinkFilm to={`/movies/${id}`} state={{ from: location }}>\n                {title}\n              </LinkFilm>\n            </ListChild>\n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n\nFilmsList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default FilmsList;\n","const IMAGE_URL = 'https://image.tmdb.org/t/p/';\n\nexport const normalizerIncomingFilmData = film => {\n  const { title, vote_average, release_date, overview, genres, poster_path } = film;\n  const rating =\n    (vote_average * 10) % 1 === 0\n      ? Number(vote_average * 10) + '%'\n      : (vote_average * 10).toFixed(1) + '%';\n  const release = release_date.split('-')[0];\n  const genre = genres.map(genre => genre.name).join(', ');\n  const poster = `${IMAGE_URL}w300${poster_path}`;\n  return {\n    title,\n    rating,\n    release,\n    overview,\n    genres: genre,\n    poster,\n  };\n};\n\nexport const normalizerIncomingFilmListData = filmList => {\n  return filmList.map(({ id, title }) => ({ id, title }));\n};\n\nexport const normalizerIncomingActorsData = data => {\n  return data.cast.map(({ id, character, original_name: name, profile_path }) => {\n    const photo =\n      profile_path !== null\n        ? `${IMAGE_URL}original${profile_path}`\n        : 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png';\n    return { id, character, name, photo };\n  });\n};\n\nexport const normalizerIncomingReviewsData = data => {\n  return data.results.map(({ id, author, content, author_details: { avatar_path } }) => {\n    const regex = '^/+[a-zA-Z0-9]+[.]+[a-z]+$';\n    let avatar =\n      avatar_path ?? 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png';\n\n    if (avatar.match(regex)) {\n      avatar = `${IMAGE_URL}original${avatar}`;\n    }\n\n    if (avatar.startsWith('/')) {\n      avatar = avatar.substring(1);\n    }\n\n    return { id, author, content, avatar };\n  });\n};\n","import styled from '@emotion/styled';\n\nexport const SearchForm = styled.form`\n  height: 34px;\n  display: flex;\n  align-items: center;\n  position: relative;\n  width: 250px;\n`;\n\nexport const Input = styled.input`\n  height: 100%;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid #707070;\n`;\n\nexport const Button = styled.button`\n  height: 100%;\n  display: inline-block;\n  background-color: transparent;\n  position: absolute;\n  right: 0;\n  border: none;\n  cursor: pointer;\n\n  &:hover {\n    color: #ff4500;\n    transition: 250ms;\n  }\n`;\n","import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { SearchForm, Input, Button } from './SearchForm.styled';\nimport { BsSearch } from 'react-icons/bs';\n\nfunction Form({ onSearch }) {\n  const [search, setSearch] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const request = search.trim();\n    if (request.length === 0) {\n      toast.error('Request could not be empty');\n      setSearch('');\n      return;\n    }\n    onSearch(request);\n    setSearch('');\n  };\n\n  return (\n    <SearchForm onSubmit={handleSubmit}>\n      <Input\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Enter a movie name\"\n        onChange={e => setSearch(e.target.value)}\n        value={search}\n        required\n      />\n      <Button type=\"submit\">\n        <BsSearch />\n      </Button>\n    </SearchForm>\n  );\n}\n\nexport default Form;\n","import { useState, useEffect } from 'react';\nimport FilmsList from 'components/films-list';\nimport { getSearchMovie } from 'api/tmdbApi';\nimport Form from 'components/search-form';\nimport { toast } from 'react-toastify';\nimport { useSearchParams } from 'react-router-dom';\nimport { Pulsar } from '@uiball/loaders';\nimport { normalizerIncomingFilmListData } from 'helpers/normalizers';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const search = searchParams.get('query');\n    if (!search) return;\n    getSearchMovie(search)\n      .then(data => {\n        const { results } = data;\n        if (results.length === 0) {\n          toast.error('No results found');\n          setMovies(null);\n          return;\n        }\n        setMovies(normalizerIncomingFilmListData(results));\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [searchParams]);\n\n  const handleSearchAndUrlChange = value => {\n    setIsLoading(true);\n    setSearchParams({ query: value });\n  };\n\n  return (\n    <>\n      <Form onSearch={handleSearchAndUrlChange} />\n      {isLoading && <Pulsar />}\n      {movies && <FilmsList films={movies} />}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","axios","END_POINTS","getTrending","request","data","getSearchMovie","query","getMovieDetails","id","getMovieActors","getMovieReviews","List","styled","ListChild","LinkFilm","Link","films","location","useLocation","map","title","to","state","from","IMAGE_URL","normalizerIncomingFilmData","film","vote_average","release_date","overview","genres","poster_path","rating","Number","toFixed","release","split","genre","name","join","poster","normalizerIncomingFilmListData","filmList","normalizerIncomingActorsData","cast","character","original_name","profile_path","photo","normalizerIncomingReviewsData","results","author","content","avatar_path","author_details","avatar","match","startsWith","substring","SearchForm","Input","Button","onSearch","useState","search","setSearch","onSubmit","e","preventDefault","trim","length","toast","type","autoComplete","autoFocus","placeholder","onChange","target","value","required","useSearchParams","searchParams","setSearchParams","movies","setMovies","isLoading","setIsLoading","useEffect","get","then","finally","Pulsar"],"sourceRoot":""}