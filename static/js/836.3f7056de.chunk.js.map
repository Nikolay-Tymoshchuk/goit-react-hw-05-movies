{"version":3,"file":"static/js/836.3f7056de.chunk.js","mappings":"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","sources":["api/tmdbApi.js","components/cast/Cast.styled.jsx","components/cast/Cast.jsx","helpers/normalizers.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '5ce599886a4c0703a030654068991e03';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst END_POINTS = {\n  TRENDING: '/trending/movie/day',\n  SEARCH_MOVIE: '/search/movie',\n  DETAILS: '/movie/',\n};\n\nexport const getTrending = async () => {\n  const request = await axios.get(\n    `${END_POINTS.TRENDING}?api_key=${API_KEY}&language=en-US&page=1&time_window=week`\n  );\n  return request.data;\n};\n\nexport const getSearchMovie = async query => {\n  const request = await axios.get(\n    `${END_POINTS.SEARCH_MOVIE}?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`\n  );\n  return request.data;\n};\n\nexport const getMovieDetails = async id => {\n  const request = await axios.get(`${END_POINTS.DETAILS}${id}?api_key=${API_KEY}`);\n  return request.data;\n};\n\nexport const getMovieActors = async id => {\n  const request = await axios.get(`${END_POINTS.DETAILS}${id}/credits?api_key=${API_KEY}`);\n  return request.data;\n};\n\nexport const getMovieReviews = async id => {\n  const request = await axios.get(`${END_POINTS.DETAILS}${id}/reviews?api_key=${API_KEY}`);\n  return request.data;\n};\n","import styled from '@emotion/styled';\n\nexport const ImageBox = styled.div`\n  width: 100px;\n`;\n\nexport const Character = styled.p`\n  font-size: 0.8rem;\n`;\n\nexport const List = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  grid-template-rows: max-content;\n  grid-gap: 2rem;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import { getMovieActors } from 'api/tmdbApi';\nimport { normalizerIncomingActorsData } from 'helpers/normalizers';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ImageBox, Character, List, ListItem } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieActors(movieId).then(data => {\n      setCast(normalizerIncomingActorsData(data));\n    });\n  }, [movieId]);\n\n\n  return (\n    <>\n      {!cast && <div>Loading...</div>}\n      {cast && (\n        <List>\n          {cast.map(({ id, character, name, photo }) => (\n            <ListItem key={id}>\n              <h5>{name}</h5>\n              <Character>\n                Character: <i>{character}</i>\n              </Character>\n              <ImageBox>\n                <img src={photo} alt={name} />\n              </ImageBox>\n            </ListItem>\n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","const IMAGE_URL = 'https://image.tmdb.org/t/p/';\n\nexport const normalizerIncomingFilmData = film => {\n  const { title, vote_average, release_date, overview, genres, poster_path } = film;\n  const rating =\n    (vote_average * 10) % 1 === 0\n      ? Number(vote_average * 10) + '%'\n      : (vote_average * 10).toFixed(1) + '%';\n  const release = release_date.split('-')[0];\n  const genre = genres.map(genre => genre.name).join(', ');\n  const poster = `${IMAGE_URL}w300${poster_path}`;\n  return {\n    title,\n    rating,\n    release,\n    overview,\n    genres: genre,\n    poster,\n  };\n};\n\nexport const normalizerIncomingActorsData = data => {\n  return data.cast.map(({ id, character, original_name: name, profile_path }) => {\n    const photo =\n      profile_path !== null\n        ? `${IMAGE_URL}original${profile_path}`\n        : 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png';\n    return { id, character, name, photo };\n  });\n};\n\nexport const normalizerIncomingReviewsData = data => {\n  return data.results.map(({ id, author, content, author_details: { avatar_path } }) => {\n    const regex = '^/+[a-zA-Z0-9]+[.]+[a-z]+$';\n    let avatar =\n      avatar_path ?? 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png';\n\n    if (avatar.match(regex)) {\n      avatar = `${IMAGE_URL}original${avatar}`;\n    }\n\n    if (avatar.startsWith('/')) {\n      avatar = avatar.substring(1);\n    }\n\n    return { id, author, content, avatar };\n  });\n};\n"],"names":["API_KEY","axios","END_POINTS","getTrending","request","data","getSearchMovie","query","getMovieDetails","id","getMovieActors","getMovieReviews","ImageBox","styled","Character","List","ListItem","useState","cast","setCast","movieId","useParams","useEffect","then","normalizerIncomingActorsData","map","character","name","photo","src","alt","IMAGE_URL","normalizerIncomingFilmData","film","title","vote_average","release_date","overview","genres","poster_path","rating","Number","toFixed","release","split","genre","join","poster","original_name","profile_path","normalizerIncomingReviewsData","results","author","content","avatar_path","author_details","avatar","match","startsWith","substring"],"sourceRoot":""}